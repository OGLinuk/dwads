// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dws-service.proto

/*
Package dws_service is a generated protocol buffer package.

It is generated from these files:
	dws-service.proto

It has these top-level messages:
	UploadWADRequest
	UploadWADResponse
*/
package dws_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadWADRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UploadWADRequest) Reset()                    { *m = UploadWADRequest{} }
func (m *UploadWADRequest) String() string            { return proto.CompactTextString(m) }
func (*UploadWADRequest) ProtoMessage()               {}
func (*UploadWADRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UploadWADRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type UploadWADResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *UploadWADResponse) Reset()                    { *m = UploadWADResponse{} }
func (m *UploadWADResponse) String() string            { return proto.CompactTextString(m) }
func (*UploadWADResponse) ProtoMessage()               {}
func (*UploadWADResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UploadWADResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*UploadWADRequest)(nil), "UploadWADRequest")
	proto.RegisterType((*UploadWADResponse)(nil), "UploadWADResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DWSService service

type DWSServiceClient interface {
	UploadWAD(ctx context.Context, opts ...grpc.CallOption) (DWSService_UploadWADClient, error)
}

type dWSServiceClient struct {
	cc *grpc.ClientConn
}

func NewDWSServiceClient(cc *grpc.ClientConn) DWSServiceClient {
	return &dWSServiceClient{cc}
}

func (c *dWSServiceClient) UploadWAD(ctx context.Context, opts ...grpc.CallOption) (DWSService_UploadWADClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DWSService_serviceDesc.Streams[0], c.cc, "/DWSService/UploadWAD", opts...)
	if err != nil {
		return nil, err
	}
	x := &dWSServiceUploadWADClient{stream}
	return x, nil
}

type DWSService_UploadWADClient interface {
	Send(*UploadWADRequest) error
	CloseAndRecv() (*UploadWADResponse, error)
	grpc.ClientStream
}

type dWSServiceUploadWADClient struct {
	grpc.ClientStream
}

func (x *dWSServiceUploadWADClient) Send(m *UploadWADRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dWSServiceUploadWADClient) CloseAndRecv() (*UploadWADResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadWADResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DWSService service

type DWSServiceServer interface {
	UploadWAD(DWSService_UploadWADServer) error
}

func RegisterDWSServiceServer(s *grpc.Server, srv DWSServiceServer) {
	s.RegisterService(&_DWSService_serviceDesc, srv)
}

func _DWSService_UploadWAD_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DWSServiceServer).UploadWAD(&dWSServiceUploadWADServer{stream})
}

type DWSService_UploadWADServer interface {
	SendAndClose(*UploadWADResponse) error
	Recv() (*UploadWADRequest, error)
	grpc.ServerStream
}

type dWSServiceUploadWADServer struct {
	grpc.ServerStream
}

func (x *dWSServiceUploadWADServer) SendAndClose(m *UploadWADResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dWSServiceUploadWADServer) Recv() (*UploadWADRequest, error) {
	m := new(UploadWADRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DWSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DWSService",
	HandlerType: (*DWSServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadWAD",
			Handler:       _DWSService_UploadWAD_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dws-service.proto",
}

func init() { proto.RegisterFile("dws-service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x29, 0x2f, 0xd6,
	0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe3,
	0x12, 0x08, 0x2d, 0xc8, 0xc9, 0x4f, 0x4c, 0x09, 0x77, 0x74, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x11, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09,
	0x02, 0xb3, 0x95, 0x74, 0xb9, 0x04, 0x91, 0xd4, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x49,
	0x70, 0xb1, 0x17, 0x97, 0x26, 0x27, 0xa7, 0x16, 0x17, 0x83, 0xd5, 0x72, 0x04, 0xc1, 0xb8, 0x46,
	0x4e, 0x5c, 0x5c, 0x2e, 0xe1, 0xc1, 0xc1, 0x10, 0xab, 0x84, 0x4c, 0xb8, 0x38, 0xe1, 0x9a, 0x85,
	0x04, 0xf5, 0xd0, 0x2d, 0x94, 0x12, 0xd2, 0xc3, 0x30, 0x5b, 0x83, 0x31, 0x89, 0x0d, 0xec, 0x42,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x4a, 0x75, 0x4f, 0xb6, 0x00, 0x00, 0x00,
}
